from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models
from .base_models import Product, Category
from django.contrib.auth.models import User

class Wishlist(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    product = GenericForeignKey('content_type', 'object_id')

    def __str__(self):
        return f"{self.user}'s Wishlist Item: {self.product}"


class Motherboard(Product):
    category = models.ForeignKey(Category, related_name='motherboards', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    image = models.ImageField(upload_to='product_images/', blank=True, null=True)
    cpu_socket_type = models.CharField(max_length=100, default='n/a')
    cpu_type = models.CharField(max_length=100, default='n/a')
    chipset = models.CharField(max_length=100, default='n/a')
    number_of_memory_slots = models.CharField(max_length=100, default='n/a')
    memory_standard = models.TextField(default='n/a')
    maximum_memory_supported = models.CharField(max_length=100, default='n/a')
    channel_supported = models.CharField(max_length=100, default='n/a')
    ecc_supported = models.CharField(max_length=100, default='n/a')
    buffer_supported = models.CharField(max_length=100, default='n/a')
    memory_feature = models.CharField(max_length=100, default='n/a')
    pci_express_5_x16 = models.TextField(default='n/a')
    pci_express_x1 = models.TextField(default='n/a')
    sata_6gb_s = models.CharField(max_length=100, default='n/a')
    m2_slot = models.TextField(default='n/a')
    sata_raid = models.TextField(default='n/a')
    additional_raid_controller = models.TextField(default='n/a')
    audio_chipset = models.CharField(max_length=100, default='n/a')
    audio_channels = models.CharField(max_length=100, default='n/a')
    lan_chipset = models.CharField(max_length=100, default='n/a')
    max_lan_speed = models.CharField(max_length=100, default='n/a')
    wireless_lan = models.TextField(default='n/a')
    bluetooth = models.CharField(max_length=100, default='n/a')
    back_io_ports = models.TextField(default='n/a')
    onboard_usb = models.TextField(default='n/a')
    other_connectors = models.TextField(default='n/a')
    form_factor = models.CharField(max_length=100, default='n/a')
    led_lighting = models.TextField(default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    power_pin = models.TextField(default='n/a')
    windows_compatibility = models.CharField(max_length=100, default='Windows 11 Supported')
    date_first_available = models.DateField(null=True, blank=True, default=None)

    def __str__(self):
        return f'{self.brand} {self.model} Motherboard'
    

class CPU(Product):
    category = models.ForeignKey(Category, related_name='cpus', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    processor_type = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    name = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    cpu_socket_type = models.CharField(max_length=100, default='n/a')
    core_name = models.CharField(max_length=100, default='n/a')
    number_of_cores = models.CharField(max_length=100, default='n/a')
    number_of_threads = models.CharField(max_length=100, default='n/a')
    operating_frequency = models.CharField(max_length=300, default='n/a')
    max_turbo_frequenvy = models.CharField(max_length=300, default='n/a')
    l2_cache = models.CharField(max_length=100, default='n/a')
    l3_cache = models.CharField(max_length=100, default='n/a')
    manufacturing_tech = models.CharField(max_length=100, default='n/a')
    support_64_bit  = models.CharField(max_length=100, default='n/a')
    hyper_threading_support = models.CharField(max_length=100, default='n/a')
    memory_types = models.CharField(max_length=100, default='n/a')
    memory_channel = models.CharField(max_length=100, default='n/a')
    max_memory_size = models.CharField(max_length=100, default='n/a')
    max_memory_bandwidth = models.CharField(max_length=100, default='n/a')
    virtualization_technology_support = models.CharField(max_length=100, default='n/a')
    integrated_graphics  = models.CharField(max_length=100, default='n/a')
    pci_express_revision = models.CharField(max_length=100, default='n/a')
    max_number_pci_lanes = models.CharField(max_length=100, default='n/a')
    thermal_design_power = models.CharField(max_length=100, default='n/a')
    cooling_device = models.CharField(max_length=100, default='n/a')
    operating_system_supported = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} CPU'


class GraphicsCard(Product):
    category = models.ForeignKey(Category, related_name='graphicscards', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    chipset_manufacturer = models.CharField(max_length=100, default='n/a')
    gpu_series = models.CharField(max_length=100, default='n/a')
    gpu = models.CharField(max_length=100, default='n/a')
    game_clock = models.CharField(max_length=100, default='n/a')
    boost_clock = models.CharField(max_length=100, default='n/a')
    stream_processors = models.CharField(max_length=100, default='n/a')
    memory_size = models.CharField(max_length=100, default='n/a')
    memory_interface = models.CharField(max_length=100, default='n/a')
    memory_type = models.CharField(max_length=100, default='n/a')
    directx = models.CharField(max_length=100, default='n/a')
    opengl = models.CharField(max_length=100, default='n/a')
    multi_monitor_support = models.CharField(max_length=100, default='n/a')
    hdmi = models.CharField(max_length=100, default='n/a')
    displayport = models.CharField(max_length=100, default='n/a')
    max_resolution = models.CharField(max_length=100, default='n/a')
    cooler = models.CharField(max_length=100, default='n/a')
    thermal_design_power = models.CharField(max_length=100, default='n/a')
    recommended_psu_wattage = models.CharField(max_length=100, default='n/a')
    power_connector = models.CharField(max_length=100, default='n/a')
    gpu_length = models.CharField(max_length=100, default='n/a')
    slot_width = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Graphics Card'


class RAM(Product):
    category = models.ForeignKey(Category, related_name='ram', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    part_number = models.CharField(max_length=100, default='n/a')
    capacity = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    speed = models.CharField(max_length=100, default='n/a')
    cas_latency = models.CharField(max_length=100, default='n/a')
    timing = models.CharField(max_length=100, default='n/a')
    voltage = models.CharField(max_length=100, default='n/a')
    ecc = models.CharField(max_length=100, default='n/a')
    buffered_registered = models.CharField(max_length=100, default='n/a')
    multi_channel_kit = models.CharField(max_length=100, default='n/a')
    bios_performance_profile = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    heat_spreader = models.CharField(max_length=100, default='n/a')
    recommend_use = models.CharField(max_length=100, default='n/a')
    led_color = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} RAM'


class ComputerCase(Product):
    category = models.ForeignKey(Category, related_name='computercases', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    case_material = models.CharField(max_length=100, default='n/a')
    with_power_supply = models.CharField(max_length=100, default='n/a')
    power_supply = models.CharField(max_length=100, default='n/a')
    psu_main_connector = models.CharField(max_length=100, default='n/a')
    motherboard_compatibility = models.CharField(max_length=100, default='n/a')
    dust_filters = models.CharField(max_length=100, default='n/a')
    internal_3_5_drive_bays = models.CharField(max_length=100, default='n/a')
    internal_2_5_drive_bays = models.CharField(max_length=100, default='n/a')
    expansion_slots = models.CharField(max_length=100, default='n/a')
    front_ports = models.CharField(max_length=100, default='n/a')
    fan_options = models.CharField(max_length=100, default='n/a')
    radiator_options = models.CharField(max_length=100, default='n/a')
    max_gpu_length = models.CharField(max_length=100, default='n/a')
    max_cpu_cooler_height = models.CharField(max_length=100, default='n/a')
    max_psu_length = models.CharField(max_length=100, default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    weight = models.CharField(max_length=100, default='n/a')
    features = models.CharField(max_length=100, default='n/a')
    package_content = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Computer Case'


class PowerSupply(Product):
    category = models.ForeignKey(Category, related_name='powersupplies', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default=None)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    maximum_power = models.CharField(max_length=100, default='n/a')
    fans = models.CharField(max_length=100, default='n/a')
    pfc = models.CharField(max_length=100, default='n/a')
    main_connector = models.CharField(max_length=100, default='n/a')
    plus12v_rails = models.CharField(max_length=100, default='n/a')
    pci_express_connector = models.CharField(max_length=100, default='n/a')
    sata_power_connector = models.CharField(max_length=100, default='n/a')
    max_psu_length = models.CharField(max_length=100, default='n/a')
    modular = models.CharField(max_length=100, default='n/a')
    hold_up_time = models.CharField(max_length=100, default='n/a')
    efficiency = models.CharField(max_length=100, default='n/a')
    energy_efficient = models.CharField(max_length=100, default='n/a')
    psu_noise_level = models.CharField(max_length=100, default='n/a')
    over_voltage_protection = models.CharField(max_length=100, default='n/a')
    input_voltage = models.CharField(max_length=100, default='n/a')
    input_frequency_range = models.CharField(max_length=100, default='n/a')
    input_current = models.CharField(max_length=100, default='n/a')
    output = models.CharField(max_length=100, default='n/a')
    mtbf = models.CharField(max_length=100, default='n/a')
    approvals = models.CharField(max_length=100, default='n/a')
    connectors = models.CharField(max_length=100, default='n/a')
    features = models.CharField(max_length=100, default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    weight = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Power Supply'


class CPUAirCooler(Product):
    category = models.ForeignKey(Category, related_name='cpuaircooler', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    fan_size = models.CharField(max_length=100, default='n/a')
    cpu_socket_compatibility = models.CharField(max_length=255, default='n/a')
    bearing_type = models.CharField(max_length=100, default='n/a')
    rpm = models.CharField(max_length=100, default='n/a')
    air_flow = models.CharField(max_length=100, default='n/a')
    noise_level = models.CharField(max_length=100, default='n/a')
    power_connector = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    led = models.CharField(max_length=100, default='n/a')
    max_cpu_cooler_height = models.CharField(max_length=100, default='n/a')
    fan_dimensions = models.CharField(max_length=100, default='n/a')
    heatsink_dimensions = models.CharField(max_length=100, default='n/a')
    weight = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} CPU Air Cooler'


class CPULiquidCooler(Product):
    category = models.ForeignKey(Category, related_name='cpuliquidcooler', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    part_number = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    block_compatibility = models.CharField(max_length=255, default='n/a')
    block_compatibility_amd = models.CharField(max_length=100, default='n/a')
    block_compatibility_intel = models.CharField(max_length=100, default='n/a')
    pump_noise = models.CharField(max_length=100, default='n/a')
    radiator_size = models.CharField(max_length=100, default='n/a')
    radiator_material = models.CharField(max_length=100, default='n/a')
    fan_size = models.CharField(max_length=100, default='n/a')
    fan_dim = models.CharField(max_length=100, default='n/a')
    bearing_type = models.CharField(max_length=100, default='n/a')
    fan_rpm = models.CharField(max_length=100, default='n/a')
    fan_air_flow = models.CharField(max_length=100, default='n/a')
    fan_noise = models.CharField(max_length=100, default='n/a')
    fan_connector = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    led_color = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} CPU Liquid Cooler'


class CaseFan(Product):
    category = models.ForeignKey(Category, related_name='casefan', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    fan_counts = models.CharField(max_length=100, default='n/a')
    fan_controller = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    fan_size = models.CharField(max_length=100, default='n/a')
    fan_thickness = models.CharField(max_length=100, default='n/a')
    bearing_type = models.CharField(max_length=100, default='n/a')
    rpm = models.CharField(max_length=100, default='n/a')
    air_flow = models.CharField(max_length=100, default='n/a')
    noise_level = models.CharField(max_length=100, default='n/a')
    power_connector = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    led = models.CharField(max_length=100, default='n/a')
    features = models.TextField(default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    package_contents = models.TextField(default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.series} {self.model} Case Fan'


class SoundCard(Product):
    category = models.ForeignKey(Category, related_name='soundcard', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    part = models.CharField(max_length=100, default='n/a')
    audio_chipset = models.CharField(max_length=100, default='n/a')
    channels = models.CharField(max_length=100, default='n/a')
    sample_rate = models.CharField(max_length=100, default='n/a')
    digital_audio = models.CharField(max_length=100, default='n/a')
    snr = models.CharField(max_length=100, default='n/a')
    encode = models.CharField(max_length=100, default='n/a')
    line_in = models.CharField(max_length=100, default='n/a')
    line_out = models.CharField(max_length=100, default='n/a')
    spdif_in = models.CharField(max_length=100, default='n/a')
    spdif_out = models.CharField(max_length=100, default='n/a')
    other_ports = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    operating_systems_supported = models.CharField(max_length=255, default='n/a')
    system_requirements = models.TextField(default='n/a')
    features = models.TextField(default='n/a')
    package_contents = models.TextField(default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Sound Card'


class HardDrive(Product):
    category = models.ForeignKey(Category, related_name='harddrive', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    type = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    packaging = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    capacity = models.CharField(max_length=100, default='n/a')  
    nand_flash_memory_type = models.CharField(max_length=100, default='n/a')
    recording_technology = models.CharField(max_length=100, default='n/a')
    rpm = models.CharField(max_length=100, default='n/a')  
    cache = models.CharField(max_length=100, default='n/a')  
    features = models.TextField(default='n/a')
    usage = models.CharField(max_length=100, default='n/a')
    form_factor = models.CharField(max_length=100, default='n/a')
    height_maximum = models.CharField(max_length=100, default='n/a')  
    width_maximum = models.CharField(max_length=100, default='n/a')  
    length_maximum = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Hard Drive'
    

class SSD(Product):
    category = models.ForeignKey(Category, related_name='ssd', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    device_type = models.CharField(max_length=100, default='n/a')
    form_factor = models.CharField(max_length=100, default='n/a')
    capacity = models.CharField(max_length=100, default='n/a')
    memory_components = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    max_sequential_read = models.CharField(max_length=100, default='n/a')
    max_sequential_write = models.CharField(max_length=100, default='n/a')
    random_read_4kb = models.CharField(max_length=100, default='n/a')
    random_write_4kb = models.CharField(max_length=100, default='n/a')
    tbw = models.CharField(max_length=100, default='n/a') 
    mttf = models.CharField(max_length=100, default='n/a') 
    heatsink = models.CharField(max_length=100, default='n/a')
    features = models.TextField(default='n/a')
    operating_temperature = models.CharField(max_length=100, default='n/a')
    storage_temperature = models.CharField(max_length=100, default='n/a')
    max_shock_resistance = models.CharField(max_length=100, default='n/a')
    max_vibration_resistance = models.CharField(max_length=100, default='n/a')
    height = models.CharField(max_length=100, default='n/a')
    width = models.CharField(max_length=100, default='n/a')
    depth = models.CharField(max_length=100, default='n/a')
    weight = models.CharField(max_length=100, default='7.50g')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} SSD'
    

class Monitor(Product):
    category = models.ForeignKey(Category, related_name='monitors', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    series = models.CharField(max_length=100, default='n/a')
    cabinet_color = models.CharField(max_length=100, default='n/a')
    bezel_design = models.CharField(max_length=100, default='n/a')
    screen_size = models.CharField(max_length=100, default='n/a')
    widescreen = models.CharField(max_length=100, default='n/a')
    glare_screen = models.CharField(max_length=100, default='n/a')
    panel = models.CharField(max_length=100, default='n/a')
    display_type = models.CharField(max_length=100, default='n/a')
    adaptive_sync_technology = models.CharField(max_length=100, default='n/a')
    recommended_resolution = models.CharField(max_length=100, default='n/a')
    viewing_angle = models.CharField(max_length=100, default='n/a')
    brightness = models.CharField(max_length=100, default='n/a')
    contrast_ratio = models.CharField(max_length=100, default='n/a')
    response_time = models.CharField(max_length=100, default='n/a')
    color_gamut = models.CharField(max_length=100, default='n/a')
    pixel_pitch = models.CharField(max_length=100, default='n/a')
    refresh_rate = models.CharField(max_length=100, default='n/a')
    hdr_standard = models.CharField(max_length=100, default='n/a')
    curved_surface_screen = models.CharField(max_length=100, default='n/a')
    curvature_radius = models.CharField(max_length=100, default='n/a')
    video_ports = models.CharField(max_length=100, default='n/a')
    headphone = models.CharField(max_length=100, default='n/a')
    power_supply = models.CharField(max_length=100, default='n/a')
    power_consumption = models.CharField(max_length=100, default='n/a')
    stand_adjustments = models.CharField(max_length=100, default='n/a')
    built_in_speakers = models.CharField(max_length=100, default='n/a')
    vesa_compatibility_mountable = models.CharField(max_length=100, default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    weight = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.series} Monitor'
    

class Keyboard(Product):
    category = models.ForeignKey(Category, related_name='keyboards', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    part_number = models.CharField(max_length=100, default='n/a')
    keyboard_interface = models.CharField(max_length=100, default='n/a')
    design_style = models.CharField(max_length=100, default='n/a')
    palm_rest = models.CharField(max_length=100, default='n/a')
    normal_keys = models.CharField(max_length=100, default='n/a')
    function_keys = models.CharField(max_length=100, default='n/a')
    mechanical_keyboard = models.CharField(max_length=100, default='n/a')
    key_switch_type = models.CharField(max_length=100, default='n/a')
    keyboard_color = models.CharField(max_length=100, default='n/a')
    backlit = models.CharField(max_length=100, default='n/a')
    dimensions = models.CharField(max_length=100, default='n/a')
    tipe = models.CharField(max_length=100, default='n/a')  
    mouse_included = models.CharField(max_length=100, default='n/a')
    operating_system_supported = models.CharField(max_length=100, default='n/a')
    system_requirement = models.CharField(max_length=100, default='n/a')
    features = models.TextField(default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Keyboard'


class Headset(Product):
    category = models.ForeignKey(Category, related_name='headsets', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    compatibility = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    led = models.CharField(max_length=100, default='n/a')
    connection_type = models.CharField(max_length=100, default='n/a')
    connector = models.CharField(max_length=100, default='n/a')
    audio_type = models.CharField(max_length=100, default='n/a')
    driver_unit = models.CharField(max_length=100, default='n/a')
    headphone_frequency_response = models.CharField(max_length=100, default='n/a')
    headphone_input_impedance = models.CharField(max_length=100, default='n/a')
    headphone_sensitivity = models.CharField(max_length=100, default='n/a')
    ear_coupling = models.CharField(max_length=100, default='n/a')
    microphone_impedance = models.CharField(max_length=100, default='n/a')
    microphone_frequency_response = models.CharField(max_length=100, default='n/a')
    microphone_sensitivity = models.CharField(max_length=100, default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} Headset'


class Mouse(Product):
    category = models.ForeignKey(Category, related_name='mouses', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    name = models.CharField(max_length=100, default='n/a')  
    model = models.CharField(max_length=100, default='n/a')
    part_number = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    wired = models.CharField(max_length=100, default='n/a')
    mouse_grip_style = models.CharField(max_length=100, default='n/a')
    tracking_method = models.CharField(max_length=100, default='n/a')
    maximum_dpi = models.CharField(max_length=100, default='n/a')  
    hand_orientation = models.CharField(max_length=100, default='n/a')
    buttons = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    package_contents = models.TextField(default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.name} {self.model} Mouse'


class WebCam(Product):
    category = models.ForeignKey(Category, related_name='webcams', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, default='n/a')
    description = models.TextField(null=True, blank=True, default='n/a')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    discounted_units = models.IntegerField(default=0)
    brand = models.CharField(max_length=100, default='n/a')
    model = models.CharField(max_length=100, default='n/a')
    part_number = models.CharField(max_length=100, default='n/a')
    color = models.CharField(max_length=100, default='n/a')
    interface = models.CharField(max_length=100, default='n/a')
    video_capture_resolution = models.CharField(max_length=100, default='n/a')
    frame_rate = models.CharField(max_length=100, default='n/a')
    focus_settings = models.CharField(max_length=100, default='n/a')
    operating_systems_supported = models.TextField(default='n/a') 
    platform_compatibility = models.TextField(default='n/a') 
    features = models.TextField(default='n/a')
    package_contents = models.TextField(default='n/a')
    date_first_available = models.DateField(null=True, blank=True)

    def __str__(self):
        return f'{self.brand} {self.model} WebCam'
